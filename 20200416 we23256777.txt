1. 입력한 10진 정수에 대해 진수(2, 8, 16)별로 변환하여 출력하는 프로그램을 작성하시오.
#include <stdio.h>
#include <stdlib.h>

long change_radix1(long num, int radix);
long change_radix2(long num, int radix);

int main(void)
{
	long dec_num, result_num;
	int radix;
	// 16진수 변환은 제외 
	printf("10진수를 n진수로 변환\n");
	printf("10진수와 변환할 진법을 입력(예 36 8)하고 Enter>");
	scanf("%ld %d", &dec_num, &radix);
	printf("입력한 10진수 : %ld\n", dec_num);
	result_num=change_radix1(dec_num, radix);
	printf("%d진수 변환 값:%ld\n", radix, result_num);  
	printf("\n");
	result_num=change_radix2(dec_num, radix);
	printf("%d진수 변환 값:%ld\n", radix, result_num);  
	return 0;
}

long change_radix1(long num, int radix)
{
	char str[20];
	ltoa(num, str, radix);
    return atol(str);
}

long change_radix2(long num, int radix)
{
	if (num<=(radix-1))
		return num;
	return change_radix2(num/radix, radix)*10+num%radix;
}



2. 입력한 2진수를 각각 10진수와 8진수로 변환하는 함수와 프로그램을 작성하시오.
#include <stdio.h>
#include <stdlib.h>

long change_dec(long bin_num);
long change_octal(long bin_num);

int main(void)
{
	long bin_num, result_num;
	bin_num=110111;
	printf("입력한 2진수 : %ld\n", bin_num);

	result_num=change_dec(bin_num);
	printf("10진수 변환 값:%ld\n", result_num);  
	result_num=change_octal(result_num);
	printf("8진수 변환 값:%ld\n", result_num);  
	return 0;
}

long change_dec(long bin_num)
{
	if (bin_num<=1)
		return bin_num;
	return change_dec(bin_num/10)*2+bin_num%10;
}

long change_octal(long bin_num)
{
	if (bin_num<=7)
		return bin_num;
	return change_octal(bin_num/8)*10+bin_num%8;
}


3. 집합 A와 집합 B에 대한 곱집합 AXB를 출력하는 프로그램을 작성하시오.
   int a[]={1, 3, 5, 6};
   int b[]={8, 9, 10, 14, 22};

#include <stdio.h>
#include <stdlib.h>

void product_set(int a[], int s_a, int b[], int s_b, int **result);
int main(void)
{
	int a[]={1, 3, 5, 6};
	int b[]={8, 9, 10, 14, 22};
	int **result;
	int i, size_a, size_b;
	size_a=sizeof(a)/sizeof(int);
	size_b=sizeof(b)/sizeof(int);
	//2차원배열 동적할당
	result=(int**)malloc(size_a*size_b*sizeof(**result));
	for(i=0;i<size_a*size_b;i++)
		result[i] = (int*)malloc(2*sizeof(**result));
	product_set(a, size_a, b, size_b, result);

	for(i=0;i<size_a*size_b;i++)
		printf("(%d, %d)\n", result[i][0], result[i][1]);

	return 0;
}
void product_set(int a[], int s_a, int b[], int s_b, int **result)
{
	int i, j;
	for(i=0;i<s_a*s_b;i++)
		for(j=0;j<2;j++)
		{
			result[i][0]=a[i/s_b];
			result[i][j]=b[i%s_b];
		}
}


4. 임의의 행과 열을 갖는 두 행렬의 곱을 계산하는 함수를 작성하시오.
   예를 들어 3X5의 행렬과 5X4의 행렬을 곱하여 3X4의 행렬을 출력합니다.

#include<stdio.h>
void mul_matrix(int m1[][3],int m2[][3],int m3[][3],int row);
void print_matrix(int m[][3], int row_size, int col_size);
int main(void)
{
     int ma[3][5]={{3, 8, 6, 5, 2}, {4, 1, 7, 6, 2}, {5, 2, 9, 1, 3}};
     int mb[5][4]={{1, 4, 9, 7}, {6, 5, 8, 1}, {2, 3, 7, 3}, {1, 5, 2, 6}, {2, 6, 9, 3}};

     int mab[3][3]={0};;
     printf("행렬 ma\n");
     print_matrix(ma, 3, 5);
     printf("행렬 mb\n");
     print_matrix(mb, 5, 4);

	 //동적할당으로 처리해야 함

	 
/*
     mul_matrix(ma, mb, mab,3);
     printf("행렬 ma*행렬 mb\n");
     print_matrix(mab,3, 3);
*/
     return 0;
}



void mul_matrix(int m1[][3], int m2[][3],int m3[][3],int row)
{
     int r , c, k;
     for(r=0 ;r<row ;r+=1)
         for(c=0 ;c<row ;c+=1)
         {
             m3[r][c]=0;
             for(k=0 ;k<row ;k+=1)
                  m3[r][c] += m1[r][k] * m2[k][c];
         }
}


void print_matrix(int m[][3], int row_size, int col_size)
{
	int i, j;
	for(i=0;i<row_size;i++)
	{
		for(j=0;j<col_size;j++)
			printf("%2d ", m[i][j]);
		printf("\n");
	}
}

5. 천만원을 연 이율 0.1을 적용하여 1년마다 복리로 10년간 예금한다고 할 때 원리합계를 계산하시오.
hint : 10년 후의 원리합계는 원금의 (1+0.1)10배가 된다.

#include <stdio.h>
#include <math.h>

double calc(double money, double rate, double year);
int main(void)
{
	double money=10000000, rate=0.1;

    printf("원금 : %.1lf\n", money);
    printf("이자 : %.1lf\n", rate);

	printf("10년후 원금에 대한 원리합계(복리계산) :  %lf\n", calc(money, rate, 10.));
	return 0;
}


double calc(double money, double rate, double year)
{
	return money*pow(1+rate, year);
}



6. 10000원 미만의 금액을 입력받아 10워, 50원, 100원, 500원 동전을 최소한 한번씩은 이용하여 입력된 금액을 나타내되 동전의 개수가 최소가 되는 조합을 구하는 프로그램을 작성하시오. 예를 들어 1500원을 입력하면 다음과 같이 출력합니다.
500원 : 2개
100원 : 4개
50원  : 1개
10원  : 5개

//10000원 미만의 금액만 입력한다고 가정

#include <stdio.h>
void print_case(int money);

int main(void)
{
	int money;
	printf("10000원 미만의 금액을\n");
	printf("입력하고 Enter>");
	scanf("%d", &money);
	printf("입력한 금액 : %d\n\n", money);
	print_case(money);
	printf("\n");
	return 0;
}

void print_case(int money)
{
	int i500, i100, i50, i10;
	int r500, r100, r50, r10;
	int count, sum, min=100;
    for (i500=1;i500<=(money/500);i500++) 
          for (i100=1;i100<=(money/100);i100++) 
               for(i50=1;i50<=(money/50);i50++) 
					for(i10=1;i10<=(money/10);i10++)
					{
						sum=(500*i500)+(100*i100)+(50*i50)+(10*i10);
						count=i500+i100+i50+i10;
						if (sum==money)
							if (count<=min)
							{
								min=count;
								r500=i500; r100=i100; r50=i50; r10=i10;
							}
					}
	printf("500원: %2d개  %6d원\n", r500, r500*500);
	printf("100원: %2d개  %6d원\n", r100, r100*100);
	printf(" 50원: %2d개  %6d원\n", r50,  r50*50);
	printf(" 10원: %2d개  %6d원\n", r10, r10*10);
	printf("total: %2d개  %6d원\n", min, money);
}




7. 아래의 그림과 같은 파스칼의 삼각형을 출력하는 프로그램을 작성하시오.
hint : 파스칼의 삼각형을 출력하려면 이항계수를 이용합니다.
                1
              1  1
            1  2  1
          1  3   3  1
        1   4  6  4  1
      1  5  10  10  5  1   
    1  6  15  20 15  6  1  


#include <stdio.h>
long Combination(int n, int k);
long Factorial(int n);

int main(void)
{
 int i, j;
 int n;

 printf("\n파스칼의 삼각형 출력 프로그램\n\n");
 printf("출력할 행의 수 입력후 Enter\n");
 printf("행의수:");
 scanf("%d", &n);
 printf("\n\n");
 for(i=0;i<=n;i++ )
 {
  for(j=1;j<=(n-i);j++ )
	printf("  ");
  for( j = 0 ; j <= i ; j++ )
	printf("%4ld", Combination(i, j));
  putchar('\n');
 }
  return 0;
}

long Factorial(int n)
{
 long result = 1;
 int i;
 for( i = 1 ; i <= n ; i++ )
  result *= i;
 return result;
}

long Combination(int n, int k)
{
 return Factorial(n) / Factorial(n-k) / Factorial(k);
}



8. 다음은 우리나라에 "작은 별"로 알려진 "Twinkle, twinkle, little star" 가사의 일부분입니다. 가사 부분을 다음과 같이 텍스트 파일(plaintext.txt)로 저장한 다음 Caesar 암호문, 단순 전치 암호문, XOR 암호문으로 변환한 텍스트 파일을 생성하시오.

Twinkle, twinkle, little star. How I wonder what you are.
Up above the world so high. Like a diamond in the sky.
Twinkle, twinkle, little star. How I wonder what you are.

//plaintext.txt 파일을 Caesar암호문으로 변환 
//원문은 1 line 당 140자로 가정
//shift 간격은 3이 가정.


#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

char *substitution_cipher(int shift, char text[]);

int main(void)
{

	char in_file[]="plaintext.txt", out_file[]="caesar암호문.txt";
	char line[141]={'\0'};
	int shift=3;
	FILE *fp_in, *fp_out;
	fp_in=fopen(in_file, "r");
	fp_out=fopen(out_file, "w");

	if (fp_in==NULL)
	{
		printf("File open에 오류 발생");
		exit(1);
	}
	while(!feof(fp_in))
	{
		fgets(line, 140, fp_in);
		fprintf(fp_out, "%s\n", substitution_cipher(shift, line));
	}
	fclose(fp_in);
	fclose(fp_out);
	return 0;
}



char *substitution_cipher(int shift, char text[])
{
	char *cipher;
	int i, length;
	length=strlen(text);
	cipher=(char *)(malloc(length));
	for(i=0;i<length;i+=1)
		if (isalpha(text[i]))
			cipher[i]=((text[i] -'a')+shift)%26;
		else
			cipher[i]=text[i];

	for(i=0;i<length;i+=1)
		if (isalpha(cipher[i]+'a'))
			cipher[i]=toupper(cipher[i]+'a');
		else
			continue;

	cipher[length-1]='\0';
	return cipher;
}



//평문 plaintext.txt를 OXR 암호문으로 변환 
//원문은 1 line 당 140자로 가정
//key는 문자 '1'로 가정

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

char *XOR_cipher(char key, char text[]);

int main(void)
{

	char in_file[]="plaintext.txt", out_file[]="xor암호문.txt";
	char line[141]={'\0'};
	char key='1';
	FILE *fp_in, *fp_out;
	fp_in=fopen(in_file, "r");
	fp_out=fopen(out_file, "w");

	if (fp_in==NULL)
	{
		printf("File open에 오류 발생");
		exit(1);
	}
	while(!feof(fp_in))
	{
		fgets(line, 140, fp_in);
		fprintf(fp_out, "%s\n", XOR_cipher(key, line));
	}
	fclose(fp_in);
	fclose(fp_out);
	return 0;
}


char *XOR_cipher(char key, char text[])
{
	char *cipher;
	int i, length;
	length=strlen(text);
	cipher=(char *)(malloc(length));

	for(i=0;i<length;i+=1)
		cipher[i]=text[i]^key;
	cipher[length-1]='\0';
	return cipher;

}